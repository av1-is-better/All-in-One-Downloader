{"version":3,"sources":["_nav.js","routes.js","containers/DefaultLayout/DefaultLayout.js","actions/versionActions.js"],"names":["items","name","url","icon","MyDashboard","React","lazy","Home","ShowConfig","RemoteExplorerLayout","routes","path","exact","component","DefaultFooter","DefaultHeader","VERSION_NAV_ITEM_ATTRS","attributes","target","class","variant","DefaultLayout","Component","loading","className","navigation","this","props","version","componentDidMount","localStorage","getItem","AUTH_KEY","window","location","href","indexOf","LOGIN_TOKEN","history","push","getVersion","render","data-test","ErrorBoundary","fixed","fallback","onLogout","e","signOut","display","navConfig","appRoutes","Container","fluid","map","route","idx","key","from","to","connect","state","isConnected","status","dispatch","getRcloneVersion","then","res","type","GET_VERSION","REQUEST_SUCCESS","payload","error","REQUEST_ERROR"],"mappings":"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","file":"static/js/22.170b4b39.chunk.js","sourcesContent":["export default {\r\n    items: [\r\n        {\r\n            name: 'Dashboard',\r\n            url: '/dashboard',\r\n            icon: 'icon-speedometer'\r\n        },\r\n        {\r\n            name: 'Configs',\r\n            url: '/showconfig',\r\n            icon: 'icon-note'\r\n        },\r\n        {\r\n            name: 'Explorer',\r\n            url: '/remoteExplorer',\r\n            icon: 'icon-screen-desktop'\r\n        },\r\n        {\r\n            name: 'Backend',\r\n            url: '/rcloneBackend',\r\n            icon: 'icon-star',\r\n        },\r\n        {\r\n            name: 'Mounts',\r\n            url: '/mountDashboard',\r\n            icon: 'fa fa-hdd-o'\r\n        },\r\n        {\r\n            name: 'Log Out',\r\n            url: '/login',\r\n            icon: 'icon-logout',\r\n        },\r\n\r\n    ],\r\n};\r\n","import React from 'react';\r\n\r\nconst MyDashboard = React.lazy(() => import('./views/RemoteManagement/NewDrive'));\r\nconst Home = React.lazy(() => import('./views/Home'));\r\nconst ShowConfig = React.lazy(() => import('./views/RemoteManagement/ShowConfig'));\r\nconst RemoteExplorerLayout = React.lazy(() => import(\"./views/Explorer/RemoteExplorerLayout\"));\r\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\r\nconst RCloneDashboard = React.lazy(() => import(\"./views/RCloneDashboard\"));\r\nconst MountDashboard = React.lazy(() => import(\"./views/MountDashboard\"));\r\n\r\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\r\n// Define the routes as required\r\nconst routes = [\r\n    {path: '/', exact: true, name: 'Home'},\r\n    {path: '/newdrive/edit/:drivePrefix', name: 'Edit Remote', component: MyDashboard},\r\n    {path: '/newdrive', exact: true, name: 'New Remote', component: MyDashboard},\r\n    {path: '/login', exact: true, name: 'Login Page', component: Login},\r\n    {path: '/dashboard', name: 'Dashboard', component: Home},\r\n    {path: '/showconfig', name: 'Configs', component: ShowConfig},\r\n    {path: '/remoteExplorer/:remoteName/:remotePath', exact: true, name: 'Explorer', component: RemoteExplorerLayout},\r\n    {path: '/remoteExplorer', name: 'Explorer', component: RemoteExplorerLayout},\r\n    {path: '/rcloneBackend', name: 'Rclone Backend', component: RCloneDashboard},\r\n    {path: '/mountDashboard', name: 'Mount Dashboard', component: MountDashboard},\r\n\r\n];\r\n\r\nexport default routes;\r\n","import React, {Component, Suspense} from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Container} from 'reactstrap';\r\nimport {getVersion} from \"../../actions/versionActions\";\r\n\r\nimport {\r\n    AppBreadcrumb,\r\n    AppFooter,\r\n    AppHeader,\r\n    AppSidebar,\r\n    AppSidebarFooter,\r\n    AppSidebarForm,\r\n    AppSidebarHeader,\r\n    AppSidebarMinimizer,\r\n    AppSidebarNav,\r\n} from '@coreui/react';\r\n// sidebar nav config\r\nimport navigation from '../../_nav';\r\n// routes config\r\nimport routes from '../../routes';\r\nimport {connect} from \"react-redux\";\r\nimport {AUTH_KEY, LOGIN_TOKEN} from \"../../utils/Constants\";\r\nimport ErrorBoundary from \"../../ErrorHandling/ErrorBoundary\";\r\n\r\n// const DefaultAside = React.lazy(() => import('./DefaultAside'));\r\nconst DefaultFooter = React.lazy(() => import('./DefaultFooter'));\r\nconst DefaultHeader = React.lazy(() => import('./DefaultHeader'));\r\n\r\nconst VERSION_NAV_ITEM_ATTRS = {\r\n    attributes: { target: '_blank' },\r\n    class: 'mt-auto',\r\n    icon: 'cui-cog',\r\n    url: 'https://rclone.org/changelog',\r\n    variant: 'success'\r\n}\r\nclass DefaultLayout extends Component {\r\n\r\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\r\n\r\n    get navConfig() {\r\n        return {\r\n            items: [\r\n                ...navigation.items,\r\n                {\r\n                    name: this.props.version.version,\r\n                    ...VERSION_NAV_ITEM_ATTRS\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!localStorage.getItem(AUTH_KEY) || window.location.href.indexOf(LOGIN_TOKEN) > 0) {\r\n            this.props.history.push('/login');\r\n        } else {\r\n            this.props.getVersion();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"isConnected, default layout\", this.props.isConnected);\r\n        return (\r\n\r\n\r\n            <div className=\"app\" data-test=\"defaultLayout\">\r\n                <ErrorBoundary>\r\n                    <AppHeader fixed>\r\n                        <Suspense fallback={this.loading()}>\r\n                            <DefaultHeader onLogout={e => this.signOut(e)}/>\r\n                        </Suspense>\r\n                    </AppHeader>\r\n                    <div className=\"app-body\">\r\n                        <AppSidebar fixed display=\"lg\">\r\n                            <AppSidebarHeader/>\r\n                            <AppSidebarForm/>\r\n                            <Suspense fallback={this.loading()}>\r\n                                <AppSidebarNav navConfig={this.navConfig} />\r\n                            </Suspense>\r\n                            <AppSidebarFooter/>\r\n                            <AppSidebarMinimizer/>\r\n                        </AppSidebar>\r\n                        <main className=\"main\">\r\n                            <AppBreadcrumb appRoutes={routes}/>\r\n                            <Container fluid>\r\n                                <Suspense fallback={this.loading()}>\r\n                                    <Switch>\r\n                                        {\r\n                                            routes.map((route, idx) => {\r\n                                                return route.component ? (\r\n                                                    <Route\r\n                                                        key={idx}\r\n                                                        path={route.path}\r\n                                                        exact={route.exact}\r\n                                                        name={route.name}\r\n                                                        render={props => (\r\n                                                            <route.component {...props} />\r\n                                                        )}/>\r\n                                                ) : (null);\r\n                                            })\r\n                                        }\r\n                                        <Redirect from=\"/\" to=\"/dashboard\"/>\r\n                                    </Switch>\r\n                                </Suspense>\r\n                            </Container>\r\n                        </main>\r\n                    </div>\r\n                    <AppFooter>\r\n                        <Suspense fallback={this.loading()}>\r\n                            <DefaultFooter/>\r\n                        </Suspense>\r\n                    </AppFooter>\r\n                </ErrorBoundary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isConnected: state.status.isConnected,\r\n    version: state.version,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getVersion })(DefaultLayout);\r\n","import {GET_VERSION, REQUEST_ERROR, REQUEST_SUCCESS} from './types';\r\nimport {getRcloneVersion} from \"rclone-api\";\r\n\r\nexport const getVersion = () => {\r\n    return dispatch => {\r\n        getRcloneVersion().then(\r\n            res =>\r\n                dispatch({\r\n                    type: GET_VERSION,\r\n                    status: REQUEST_SUCCESS,\r\n                    payload: res\r\n                }),\r\n            error =>\r\n                dispatch({\r\n                    type: GET_VERSION,\r\n                    status: REQUEST_ERROR,\r\n                    payload: error\r\n                })\r\n        );\r\n    };\r\n};\r\n"],"sourceRoot":""}