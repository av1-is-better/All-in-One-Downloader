{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","utils/RclonePropTypes.js","actions/explorerStateActions.js","actions/explorerActions.js","../node_modules/reactstrap/es/Form.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","views/Explorer/RemotesList/RemotesList.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Table.js","actions/mountActions.js","utils/MountOptions.js","views/MountDashboard/NewMountModal.js","views/MountDashboard/MountDashboard.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","PropTypes","Features","isRequired","Hashes","Name","Precision","String","remoteName","remotePath","Path","Size","MimeType","ModTime","IsDir","rate","changePath","containerID","dispatch","type","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","explorer","currentPaths","getFiles","changeRemotePath","CHANGE_REMOTE_PATH","createPath","CREATE_PATH","removePath","REMOVE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","changeVisibilityFilter","filter","CHANGE_VISIBILITY_FILTER","changeGridMode","mode","CHANGE_GRID_MODE","setSearchQuery","searchQuery","CHANGE_SEARCH_QUERY","setLoadImages","shouldLoad","CHANGE_LOAD_IMAGES","payload","changeSortFilter","sortFilter","sortFilterAscending","CHANGE_SORT_FILTER","getFsInfo","getRemoteInfo","then","res","GET_CONFIG_FOR_REMOTE","status","REQUEST_SUCCESS","split","error","REQUEST_ERROR","getRemoteNames","getAllRemoteNames","GET_REMOTE_LIST","remotes","path","getFilesList","GET_FILES_LIST","filesList","list","changeNumCols","numCols","Error","CHANGE_LAYOUT_COLS","addRemoteContainer","paneID","uniqueID","makeUniqueID","changeActiveRemoteContainer","ADD_LAYOUT_CONTAINER","removeRemoteContainer","REMOVE_LAYOUT_CONTAINER","CHANGE_ACTIVE_REMOTE_CONTAINER","changeDistractionFreeMode","shouldEnable","CHANGE_DISTRACTION_FREE_MODE","propTypes","children","node","inline","bool","tag","tagPropType","innerRef","oneOfType","object","func","string","className","cssModule","Form","_Component","props","_this","this","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","ref","render","_this$props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","Component","defaultProps","getSuggestions","config","inputValue","trim","toLowerCase","inputLength","lang","getSuggestionValue","suggestion","renderSuggestion","RemoteListAutoSuggest","super","onSuggestionsFetchRequested","setState","suggestions","onSuggestionsClearRequested","state","inputProps","placeholder","onChange","alwaysRenderSuggestions","highlightFirstSuggestion","style","width","RemotesList","shouldUpdateRemoteName","event","newValue","indexOf","openButtonText","openRemote","e","preventDefault","handleChangeRemoteName","isEmpty","openEnabled","componentDidMount","hasError","role","aria-label","onSubmit","Col","xs","sm","lg","Button","color","connect","ownProps","remote","currentPath","valid","tooltip","FormFeedback","validMode","size","bordered","borderless","striped","dark","hover","responsive","responsiveTag","Table","ResponsiveTag","table","responsiveClassName","getMountList","axiosInstance","post","urls","listMounts","console","log","GET_MOUNT_LIST","data","vfsOptions","Type","Default","Help","Options","key","mountOptions","OptionFormInput","attr","changeHandler","currentValues","isValidMap","errorsMap","labelValue","requiredValue","Required","hasExamples","Examples","examplesMap","inputType","map","a","IsPassword","FormGroup","row","Label","for","Input","invalid","required","MountOptions","options","setCurrentValues","output","opt","hasOwnProperty","NewMountModal","buttonLabel","okHandle","useState","modal","setModal","mountFs","setMountFs","mountPoint","setMountPoint","formErrors","setFormErrors","isValid","setIsValid","vfsOptionsValues","setVfsOptionsValues","mountOptionsValues","setMountOptionsValues","toggle","handleInputChange","option","formValues","setFormValues","inputName","target","parseInt","validateResult","validateSizeSuffix","validateDuration","validateInt","data-test","onClick","Modal","isOpen","ModalHeader","ModalBody","Row","ModalFooter","disabled","MountDashboard","context","handleRemoveMount","item","unmount","MountPoint","handleCreateNewMount","addMount","handleUnmountAll","unmountAll","showNewMountCard","currentMounts","index","Date","MountedOn","toLocaleTimeString","Fs","mount","fs","mountType","vfsOpt","mountOpt","endsWith","CREATE_MOUNT","createMount","REMOVE_MOUNT","removeMount"],"mappings":"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","file":"static/js/12.b658bf30.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as PropTypes from \"prop-types\";\r\n\r\nexport const PROP_FS_INFO = PropTypes.oneOfType([\r\n    PropTypes.shape({\r\n        Features: PropTypes.object.isRequired,\r\n        Hashes: PropTypes.array.isRequired,\r\n        Name: PropTypes.string.isRequired,\r\n        Precision: PropTypes.number.isRequired,\r\n        String: PropTypes.string.isRequired\r\n    }),\r\n    PropTypes.object\r\n]);\r\n\r\nexport const PROP_CURRENT_PATH = PropTypes.shape({\r\n    remoteName: PropTypes.string.isRequired,\r\n    remotePath: PropTypes.string.isRequired\r\n});\r\n\r\nexport const PROP_CONTAINER_ID = PropTypes.string;\r\n\r\nexport const PROP_LOAD_IMAGES_BOOL = PropTypes.bool;\r\n\r\nexport const PROP_IN_VIEWPORT = PropTypes.bool;\r\n\r\nexport const PROP_ITEM = PropTypes.shape({\r\n\r\n    Path: PropTypes.string.isRequired,\r\n    Name: PropTypes.string.isRequired,\r\n    Size: PropTypes.number,\r\n    MimeType: PropTypes.string,\r\n    ModTime: PropTypes.string.isRequired,\r\n    IsDir: PropTypes.bool.isRequired\r\n\r\n});\r\n\r\nexport const PROP_BANDWIDTH = PropTypes.shape({\r\n    // bytesPerSecond: PropTypes.number.isRequired,\r\n    rate: PropTypes.string.isRequired\r\n\r\n});\r\n","import {\r\n    CHANGE_GRID_MODE,\r\n    CHANGE_LOAD_IMAGES,\r\n    CHANGE_PATH,\r\n    CHANGE_REMOTE_NAME,\r\n    CHANGE_REMOTE_PATH,\r\n    CHANGE_SEARCH_QUERY,\r\n    CHANGE_SORT_FILTER,\r\n    CHANGE_VISIBILITY_FILTER,\r\n    CREATE_PATH,\r\n    NAVIGATE_BACK,\r\n    NAVIGATE_FWD,\r\n    NAVIGATE_UP,\r\n    REMOVE_PATH\r\n} from \"./types\";\r\nimport {getFiles} from \"./explorerActions\";\r\n\r\n/**\r\n * Changes the current path of a container using container ID\r\n * @param containerID {string}\r\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\r\n * @param remotePath {string} Name of the path in the remote. eg: /tmp\r\n * @returns {Function}\r\n */\r\nexport const changePath = (containerID, remoteName, remotePath) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: CHANGE_PATH,\r\n            id: containerID,\r\n            remoteName: remoteName,\r\n            remotePath: remotePath\r\n        });\r\n        dispatch(getFilesForContainerID(containerID))\r\n    }\r\n};\r\n\r\n/**\r\n * Changes the current remote name for a particular container id\r\n * @param containerID {string}\r\n * @param remoteName {string}\r\n * @returns {Function}\r\n */\r\nexport const changeRemoteName = (containerID, remoteName) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: CHANGE_REMOTE_NAME,\r\n            remoteName: remoteName,\r\n            id: containerID,\r\n            remotePath: \"\"\r\n        });\r\n\r\n        dispatch(getFilesForContainerID(containerID))\r\n    }\r\n};\r\n\r\n/**\r\n * Issues a request to fetch the files in the current path of a container using container id.\r\n * @param containerID\r\n * @returns {Function}\r\n */\r\nexport const getFilesForContainerID = (containerID) => {\r\n\r\n    return (dispatch, getState) => {\r\n        const state = getState();\r\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\r\n        if (remoteName && remoteName !== \"\")\r\n            dispatch(getFiles(remoteName, remotePath));\r\n    }\r\n};\r\n\r\n/**\r\n * Changes the current remote path for a container ID without changing the remote name.\r\n * @param containerID {string}\r\n * @param remotePath {string}\r\n * @returns {Function}\r\n */\r\nexport const changeRemotePath = (containerID, remotePath) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: CHANGE_REMOTE_PATH,\r\n            id: containerID,\r\n            remotePath: remotePath\r\n        });\r\n        dispatch(getFilesForContainerID(containerID))\r\n    }\r\n};\r\n\r\n/**\r\n * Creates an empty path for initialization of a container.\r\n * @param containerID {string}\r\n * @returns {Function}\r\n */\r\nexport const createPath = (containerID) => dispatch => {\r\n\r\n    dispatch({\r\n        type: CREATE_PATH,\r\n        id: containerID\r\n    })\r\n};\r\n\r\n\r\n/**\r\n * Creates an empty path for initialization of a container.\r\n * @param containerID {string}\r\n * @returns {Function}\r\n */\r\nexport const removePath = (containerID) => dispatch => {\r\n\r\n    dispatch({\r\n        type: REMOVE_PATH,\r\n        id: containerID\r\n    })\r\n};\r\n\r\n\r\n/**\r\n * Computes and requests the path for going one level up in the working directory.\r\n * Eg: /tmp/abc -> navigateUp -> /tmp\r\n * @param containerID\r\n * @returns {Function}\r\n */\r\nexport const navigateUp = (containerID) => dispatch => {\r\n\r\n    dispatch({\r\n        type: NAVIGATE_UP,\r\n        id: containerID\r\n    });\r\n    dispatch(getFilesForContainerID(containerID))\r\n\r\n};\r\n\r\n/**\r\n * Navigates one stack entry up.\r\n * Requires at least one backStack entry. (The navigateBack should have been called at least once).\r\n * @param containerID {string}\r\n * @returns {Function}\r\n */\r\nexport const navigateFwd = (containerID) => dispatch => {\r\n\r\n    dispatch({\r\n        type: NAVIGATE_FWD,\r\n        id: containerID\r\n    });\r\n    dispatch(getFilesForContainerID(containerID))\r\n\r\n};\r\n\r\n\r\n/**\r\n * Navigates to one stack entry back. Works when used with navigateFwd, navigateUp.\r\n * Also requests for files in the new path\r\n * @param containerID\r\n * @returns {Function}\r\n */\r\nexport const navigateBack = (containerID) => dispatch => {\r\n\r\n    dispatch({\r\n        type: NAVIGATE_BACK,\r\n        id: containerID\r\n    });\r\n    dispatch(getFilesForContainerID(containerID))\r\n\r\n};\r\n\r\n/**\r\n * Changes the visibility filter for a given container, the filter may contain values like Images, Videos to enable viewing of only those type of file inside a container.\r\n * @param containerID\r\n * @param filter {string}\r\n * @returns {Function}\r\n */\r\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_VISIBILITY_FILTER,\r\n        id: containerID,\r\n        filter\r\n    })\r\n};\r\n\r\n/**\r\n * Changes the view from Grid Mode to Card Mode or Card Mode to Grid Mode\r\n * @param containerID\r\n * @param mode {string}\r\n * @returns {Function}\r\n */\r\nexport const changeGridMode = (containerID, mode) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_GRID_MODE,\r\n        id: containerID,\r\n        mode\r\n    })\r\n};\r\n\r\n/**\r\n * Changes the current search query to be searched in the container id. Filters the files and folders according to the new search query.\r\n * @param containerID\r\n * @param searchQuery\r\n * @returns {Function}\r\n */\r\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_SEARCH_QUERY,\r\n        id: containerID,\r\n        searchQuery\r\n    })\r\n};\r\n\r\nexport const setLoadImages = (containerID, shouldLoad) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_LOAD_IMAGES,\r\n        id: containerID,\r\n        payload: shouldLoad\r\n    })\r\n};\r\n\r\nexport const changeSortFilter = (containerID, sortFilter, sortFilterAscending) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_SORT_FILTER,\r\n        id: containerID,\r\n        payload: {\r\n            sortFilter, \r\n            sortFilterAscending\r\n        }\r\n    })\r\n}\r\n\r\n","import {\r\n    ADD_LAYOUT_CONTAINER,\r\n    CHANGE_ACTIVE_REMOTE_CONTAINER,\r\n    CHANGE_DISTRACTION_FREE_MODE,\r\n    CHANGE_LAYOUT_COLS,\r\n    GET_CONFIG_FOR_REMOTE,\r\n    GET_FILES_LIST,\r\n    GET_REMOTE_LIST,\r\n    REMOVE_LAYOUT_CONTAINER,\r\n    REQUEST_ERROR,\r\n    REQUEST_SUCCESS\r\n} from \"./types\";\r\nimport {makeUniqueID} from \"../utils/Tools\";\r\nimport {createPath, removePath} from \"./explorerStateActions\";\r\nimport {getAllRemoteNames, getFilesList, getRemoteInfo} from \"rclone-api\"\r\n\r\n/**\r\n * Gets the information regarding features, hashes from the rclone backend. Stores into redux store.\r\n * @param remoteName {string} The name of the remote\r\n * @returns {Function}\r\n */\r\nexport const getFsInfo = (remoteName) => dispatch => {\r\n    // console.log(\"Actual: \", sentRemoteName);\r\n    getRemoteInfo(remoteName).then((res) => {\r\n            dispatch({\r\n                type: GET_CONFIG_FOR_REMOTE,\r\n                status: REQUEST_SUCCESS,\r\n                payload: {[remoteName.split(':')[0]]: res},\r\n\r\n            })\r\n        },\r\n        error => dispatch({\r\n            type: GET_CONFIG_FOR_REMOTE,\r\n            status: REQUEST_ERROR,\r\n            payload: error\r\n        }))\r\n\r\n};\r\n\r\n/**\r\n * Get only remote names from the rclone backend. Stores into redux store.\r\n * @returns {Function}\r\n */\r\n\r\nexport const getRemoteNames = () => {\r\n    return (dispatch, getState) => {\r\n        getAllRemoteNames().then(res => dispatch({\r\n            type: GET_REMOTE_LIST,\r\n            status: REQUEST_SUCCESS,\r\n            payload: res.remotes\r\n        }), error => dispatch({\r\n            type: GET_REMOTE_LIST,\r\n            status: REQUEST_ERROR,\r\n            payload: error\r\n        }));\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the files for a specified remote path (remoteName + remotePath). Stores into redux store.\r\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\r\n * @param remotePath {string} Name of the path in the remote\r\n * @returns {Function}\r\n */\r\nexport const getFiles = (remoteName, remotePath) => dispatch => {\r\n    if (remoteName !== \"\") {\r\n        const path = `${remoteName}-${remotePath}`;\r\n        getFilesList(remoteName, remotePath).then(res => dispatch({\r\n                type: GET_FILES_LIST,\r\n                status: REQUEST_SUCCESS,\r\n                payload: {path: path, filesList: res.list}\r\n            }),\r\n            error => dispatch({\r\n                type: GET_FILES_LIST,\r\n                status: REQUEST_ERROR,\r\n                payload: {path: path, error}\r\n            })\r\n        )\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Changes the number of columns in current layout view.\r\n * @param mode          {string} Either \"vertical or horizontal, defines the split type\"\r\n * @param numCols       {number} Number of columns to create\r\n * @returns {Function}\r\n */\r\nexport const changeNumCols = (numCols, mode) => (dispatch) => {\r\n    if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);\r\n\r\n\r\n    // for (let i = 0; i < numCols; i++) {\r\n    //     dispatch(createPath(i.toString()))\r\n    // }\r\n\r\n    dispatch({\r\n        type: CHANGE_LAYOUT_COLS,\r\n        payload: {\r\n            numCols, mode\r\n        }\r\n    })\r\n};\r\n\r\n/**\r\n * Adds a new remote container.\r\n * @param paneID               {int} pane ID\r\n * @returns {Function}\r\n */\r\nexport const addRemoteContainer = (paneID) => (dispatch) => {\r\n    const uniqueID = makeUniqueID(3);\r\n    dispatch(createPath(uniqueID));\r\n    dispatch(changeActiveRemoteContainer(uniqueID, paneID));\r\n    dispatch({\r\n        type: ADD_LAYOUT_CONTAINER,\r\n        payload: {\r\n            containerID: uniqueID,\r\n            paneID\r\n        }\r\n    })\r\n};\r\n\r\n\r\n/**\r\n * Remove a new remote container.\r\n * @param containerID          {string} Container ID to remove\r\n * @param paneID               {int} pane ID\r\n * @returns {Function}\r\n */\r\nexport const removeRemoteContainer = (containerID, paneID) => (dispatch) => {\r\n    dispatch(removePath(containerID));\r\n    // console.log(\"Removing : \" + containerID);\r\n    dispatch({\r\n        type: REMOVE_LAYOUT_CONTAINER,\r\n        payload: {\r\n            containerID, paneID\r\n        }\r\n    })\r\n};\r\n\r\n/**\r\n * Change active remote container.\r\n * @param containerID          {string} Container ID to remove\r\n * @param paneID               {int} pane ID\r\n * @returns {Function}\r\n */\r\nexport const changeActiveRemoteContainer = (containerID, paneID) => (dispatch) => {\r\n    dispatch({\r\n        type: CHANGE_ACTIVE_REMOTE_CONTAINER,\r\n        payload: {\r\n            containerID,\r\n            paneID\r\n        }\r\n    })\r\n};\r\n\r\n/**\r\n * Enter or exit distraction free mode\r\n * @param shouldEnable  {boolean} Enable or disable distraction free mode.\r\n * @returns {Function}\r\n */\r\nexport const changeDistractionFreeMode = (shouldEnable) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_DISTRACTION_FREE_MODE,\r\n        payload: shouldEnable\r\n    })\r\n};\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","import Autosuggest from 'react-autosuggest';\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = (config, value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    if (inputLength === 0) {\r\n        return config;\r\n\r\n    }\r\n\r\n    return inputLength === 0 ? [] : config.filter(lang =>\r\n        lang.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\nconst getSuggestionValue = suggestion => suggestion;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n    <div>\r\n        <i className=\"fa fa-lg fa-hdd-o\"/> {suggestion}\r\n    </div>\r\n);\r\n\r\nclass RemoteListAutoSuggest extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Autosuggest is a controlled component.\r\n        // This means that you need to provide an input value\r\n        // and an onChange handler that updates this value (see below).\r\n        // Suggestions also need to be provided to the Autosuggest,\r\n        // and they are initially empty because the Autosuggest is closed.\r\n        this.state = {\r\n            suggestions: []\r\n        };\r\n    }\r\n\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested = ({value}) => {\r\n        this.setState({\r\n            suggestions: getSuggestions(this.props.suggestions, value)\r\n        });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {value, onChange} = this.props;\r\n\r\n\r\n        // Autosuggest will pass through all these props to the input.\r\n        const inputProps = {\r\n            placeholder: 'Type the name of remote you want to open',\r\n            value: value,\r\n            onChange: onChange\r\n        };\r\n\r\n        // Finally, render it!\r\n        return (\r\n            <Autosuggest\r\n                suggestions={this.state.suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={getSuggestionValue}\r\n                renderSuggestion={renderSuggestion}\r\n                alwaysRenderSuggestions={true}\r\n                highlightFirstSuggestion={true}\r\n                inputProps={inputProps}\r\n                style={{width:\"100%\"}}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nRemoteListAutoSuggest.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    suggestions: PropTypes.array.isRequired\r\n};\r\n\r\nexport default RemoteListAutoSuggest;","import React from 'react';\r\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\r\nimport {connect} from \"react-redux\";\r\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\r\nimport PropTypes from 'prop-types'\r\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\r\nimport {Button, Col, Form} from \"reactstrap\";\r\nimport {PROP_CURRENT_PATH} from \"../../../utils/RclonePropTypes\";\r\n\r\nclass RemotesList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEmpty: false,\r\n            remoteName: props.remoteName,\r\n            openEnabled: false,\r\n            openButtonText: \"Open\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.getRemoteNames();\r\n    }\r\n\r\n    shouldUpdateRemoteName = (event, {newValue}) => {\r\n        if (newValue.indexOf('/') === 0) {\r\n            this.setState({\r\n                remoteName: newValue,\r\n                openButtonText: \"Open local path\",\r\n            });\r\n        } else {\r\n            this.setState({\r\n                remoteName: newValue,\r\n                openButtonText: \"Open\"\r\n            });\r\n        }\r\n    };\r\n\r\n    openRemote = (e) => {\r\n        e.preventDefault();\r\n        const {handleChangeRemoteName} = this.props;\r\n        const {remoteName} = this.state;\r\n\r\n        handleChangeRemoteName(remoteName);\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        const {isEmpty, remoteName} = this.state;\r\n        const {remotes} = this.props;\r\n        const {hasError} = this.props;\r\n        // const {updateRemoteNameHandle} = this.props;\r\n\r\n        if (hasError) {\r\n            return (\r\n                <div>\r\n                    Error loading remotes. Please try again.\r\n                </div>\r\n            )\r\n        } else if (isEmpty) {\r\n            return (\r\n                <div>\r\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\r\n                </div>);\r\n        } else {\r\n\r\n            return (\r\n                <Form onSubmit={this.openRemote} className=\"row\">\r\n                    \r\n                    <Col xs={12} sm={10} lg={10}>\r\n                        <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\r\n                                                suggestions={remotes}/>\r\n                    </Col>\r\n                    <Col xs={12} sm={2} lg={2}>\r\n\r\n                        <Button className={\"btn-lg\"} color=\"success\">{this.state.openButtonText}</Button>\r\n                    </Col>\r\n                    \r\n                </Form>\r\n\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    remotes: state.remote.remotes,\r\n    hasError: false,\r\n    error: state.remote.error,\r\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\r\n});\r\n\r\nconst propTypes = {\r\n    remotes: PropTypes.array.isRequired,\r\n    error: PropTypes.object,\r\n    hasError: PropTypes.bool,\r\n    currentPath: PROP_CURRENT_PATH,\r\n    handleChangeRemoteName: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst defaultProps = {};\r\n\r\nRemotesList.propTypes = propTypes;\r\nRemotesList.defaultProps = defaultProps;\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    getRemoteNames,\r\n    getFsInfo,\r\n    changeRemoteName,\r\n\r\n})(RemotesList);\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import axiosInstance from \"../utils/API/API\";\r\nimport urls from \"../utils/API/endpoint\";\r\nimport {CREATE_MOUNT, GET_MOUNT_LIST, REMOVE_MOUNT, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\r\n\r\n/**\r\n * Get the current mount lists and load into state\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const getMountList = () => {\r\n\treturn (dispatch) => {\r\n\t\taxiosInstance.post(urls.listMounts).then(res => {\r\n\t\t\tconsole.log(res);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_MOUNT_LIST,\r\n\t\t\t\tstatus: REQUEST_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\t\t}, (error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_MOUNT_LIST,\r\n\t\t\t\tstatus: REQUEST_ERROR,\r\n\t\t\t\tpayload: error\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Add a new mount location\r\n * @param fs                        {string}    Name of the remote eg mydrive:\r\n * @param mountPoint                {string}    Path to mount on the local filesystem where rclone is running\r\n * @param mountType                 {string}    One of \"cmount\", \"mount\", \"mount2\": Specifies what mountType rclone should use\r\n * @param vfsOpt\t\t\t\t\t{{}}\t\tvfs options\r\n * @param mountOpt\t\t\t\t\t{{}}\t\tmount options\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const addMount = (fs, mountPoint, mountType, vfsOpt, mountOpt) => {\r\n\tif (!fs.endsWith(\":\")) fs = fs + \":\";\r\n\tconst type = CREATE_MOUNT\r\n\treturn (dispatch) => {\r\n\t\taxiosInstance.post(urls.createMount, {fs, mountPoint, mountType, vfsOpt, mountOpt}).then(res => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype,\r\n\t\t\t\tstatus: REQUEST_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\t\t}, (error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype,\r\n\t\t\t\tstatus: REQUEST_ERROR,\r\n\t\t\t\tpayload: error\r\n\t\t\t})\r\n\t\t})\r\n\t\tdispatch(getMountList());\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * unmount removes an mounted location \"mountPoint\"\r\n * @param mountPoint                {string}    Path to location where the mount was created.\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const unmount = (mountPoint) => {\r\n\tconst type = REMOVE_MOUNT;\r\n\treturn (dispatch) => {\r\n\t\taxiosInstance.post(urls.removeMount, {mountPoint}).then(res => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype,\r\n\t\t\t\tstatus: REQUEST_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\r\n\t\t}, (error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype,\r\n\t\t\t\tstatus: REQUEST_ERROR,\r\n\t\t\t\tpayload: error\r\n\t\t\t})\r\n\t\t})\r\n\t\tdispatch(getMountList());\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * unmountAll removes all mounts created by mount/mount\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const unmountAll = () => {\r\n\tconst type = REMOVE_MOUNT;\r\n\treturn (dispatch) => {\r\n\t\taxiosInstance.post(urls.unmountAll).then(res => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype,\r\n\t\t\t\tstatus: REQUEST_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\r\n\t\t}, (error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype,\r\n\t\t\t\tstatus: REQUEST_ERROR,\r\n\t\t\t\tpayload: error\r\n\t\t\t})\r\n\t\t})\r\n\t\tdispatch(getMountList());\r\n\t}\r\n}\r\n","export const vfsOptions = {\r\n    \"CacheMaxAge\": {\r\n        Type: 'int',\r\n        Default: 3600000000000\r\n    },\r\n    \"CacheMaxSize\": {\r\n        Type: 'int',\r\n        Default: -1,\r\n        Help: ''\r\n    },\r\n    \"CacheMode\": {\r\n        Type: 'int',\r\n        Options: [\r\n            {value:'off', key: 0},\r\n            {value:'minimal', key: 1},\r\n            {value:'writes', key: 2},\r\n            {value:'full', key: 3},\r\n        ],\r\n        Default: 0,\r\n        Help: ''\r\n    },\r\n    \"CachePollInterval\": {\r\n        Type: 'int',\r\n        Default: 60000000000,\r\n        Help: ''\r\n    },\r\n    \"CaseInsensitive\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"ChunkSize\":{\r\n        Type: 'int',\r\n        Default: 134217728,\r\n        Help: ''\r\n    },\r\n    \"ChunkSizeLimit\": {\r\n        Type: 'int',\r\n        Default: -1,\r\n        Help: ''\r\n    },\r\n    \"DirCacheTime\": {\r\n        Type: 'int',\r\n        Default: 300000000000,\r\n        Help: ''\r\n    },\r\n    \"DirPerms\": {\r\n        Type: 'int',\r\n        Default: 511,\r\n        Help: ''\r\n    },\r\n    \"FilePerms\": {\r\n        Type: 'int',\r\n        Default: 438,\r\n        Help: ''\r\n    },\r\n    \"GID\": {\r\n        Type: 'int',\r\n        Default: 1000,\r\n        Help: ''\r\n    },\r\n    \"NoChecksum\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"NoModTime\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"NoSeek\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"PollInterval\": {\r\n        Type: 'int',\r\n        Default: 60000000000,\r\n        Help: ''\r\n    },\r\n    \"ReadAhead\": {\r\n        Type: 'int',\r\n        Default: 0,\r\n        Help: ''\r\n    },\r\n    \"ReadOnly\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"ReadWait\": {\r\n        Type: 'int',\r\n        Default: 20000000,\r\n        Help: ''\r\n    },\r\n    \"UID\": {\r\n        Type: 'int',\r\n        Default: 1000,\r\n        Help: ''\r\n    },\r\n    \"Umask\": {\r\n        Type: 'int',\r\n        Default: 2,\r\n        Help: ''\r\n    },\r\n    \"WriteBack\": {\r\n        Type: 'int',\r\n        Default: 5000000000,\r\n        Help: ''\r\n    },\r\n    \"WriteWait\": {\r\n        Type: 'int',\r\n        Default: 1000000000,\r\n        Help: ''\r\n    }\r\n}\r\n\r\nexport const mountOptions = {\r\n    \"AllowNonEmpty\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"AllowOther\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"AllowRoot\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"AsyncRead\": {\r\n        Type: 'bool',\r\n        Default: true,\r\n        Help: ''\r\n    },\r\n    \"AttrTimeout\": {\r\n        Type: 'int',\r\n        Default: 1000000000,\r\n        Help: ''\r\n    },\r\n    \"Daemon\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"DaemonTimeout\": {\r\n        Type: 'int',\r\n        Default: 0,\r\n        Help: ''\r\n    },\r\n    \"DebugFUSE\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"DefaultPermissions\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"ExtraFlags\": {\r\n        Type: 'array',\r\n        Default: [],\r\n        Help: ''\r\n    },\r\n    \"ExtraOptions\": {\r\n        Type: 'array',\r\n        Default: [],\r\n        Help: ''\r\n    },\r\n    \"MaxReadAhead\": {\r\n        Type: 'int',\r\n        Default: 131072,\r\n        Help: ''\r\n    },\r\n    \"NoAppleDouble\": {\r\n        Type: 'bool',\r\n        Default: true,\r\n        Help: ''\r\n    },\r\n    \"NoAppleXattr\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    },\r\n    \"VolumeName\": {\r\n        Type: 'string',\r\n        Default: \"\",\r\n        Help: ''\r\n    },\r\n    \"WritebackCache\": {\r\n        Type: 'bool',\r\n        Default: false,\r\n        Help: ''\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport {\r\n    Button,\r\n    Col,\r\n    FormFeedback,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\nimport RemotesList from \"../Explorer/RemotesList\";\r\nimport * as PropTypes from \"prop-types\"\r\nimport {mountOptions, vfsOptions} from \"../../utils/MountOptions\";\r\nimport {isEmpty, validateDuration, validateInt, validateSizeSuffix} from \"../../utils/Tools\";\r\n\r\nconst OptionFormInput = ({attr, changeHandler, currentValues, isValidMap, errorsMap}) => {\r\n    const labelValue = `${attr.Name}`;\r\n    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\r\n\r\n    const hasExamples = !isEmpty(attr.Examples);\r\n    let examplesMap = null;\r\n\r\n    let inputType = \"\";\r\n\r\n    if(attr.Options || inputType === 'options') {\r\n        inputType = \"select\";\r\n        examplesMap = attr.Options.map(a => (<option key={a.key} value={a.key}>{a.value}</option>));\r\n    } else if (attr.IsPassword) {\r\n        inputType = \"password\";\r\n    } else if (hasExamples) {\r\n        inputType = \"string\";\r\n    } else if (attr.Type === \"bool\") {\r\n        inputType = \"select\";\r\n        examplesMap = [\r\n            (<option key={1} value={true}>Yes</option>),\r\n            (<option key={2} value={false}>No</option>)\r\n        ];\r\n    } else {\r\n        if (attr.Type === \"int\") {\r\n            inputType = \"number\";\r\n        } else if (attr.Type === \"string\") {\r\n            inputType = \"text\";\r\n        } else {\r\n            inputType = \"text\";\r\n        }\r\n\r\n    }\r\n    return (\r\n        <FormGroup row>\r\n            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\r\n            <Col sm={7}>\r\n                <Input type={inputType} value={currentValues[attr.Name] || attr.Default }\r\n                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\r\n                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\r\n                    {examplesMap}\r\n                </Input>\r\n                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\r\n\r\n            </Col>\r\n        </FormGroup>\r\n    );\r\n}\r\n\r\n\r\nconst MountOptions = ({changeHandler, currentValues, isValidMap, errorsMap, options, setCurrentValues}) => {\r\n    const output = [];\r\n    for(const opt in options) {\r\n        if(options.hasOwnProperty(opt)) {\r\n            output.push(<OptionFormInput\r\n                key={opt}\r\n                attr={{Name: opt, ...options[opt]}}\r\n                changeHandler={(e) => {\r\n                    e && e.preventDefault();\r\n                    changeHandler(e, options[opt], currentValues, setCurrentValues);\r\n                }}\r\n                currentValues={currentValues}\r\n                errorsMap={errorsMap}\r\n                isValidMap={isValidMap}/>);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n/**\r\n * New Mount Modal shows a button for opening a modal for new mount and then executes okHandle when positive\r\n * button is clicked\r\n * @param props\r\n * @returns {*}\r\n * @constructor\r\n */\r\nconst NewMountModal = (props) => {\r\n    const {\r\n        buttonLabel,\r\n        className,\r\n        okHandle\r\n\r\n    } = props;\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const [mountFs, setMountFs] = useState(\"\");\r\n\r\n    const [mountPoint, setMountPoint] = useState(\"\");\r\n\r\n    const [formErrors, setFormErrors] = useState((() => {\r\n        const output = {};\r\n        for(const opt in vfsOptions) {\r\n            output[opt] = \"\";\r\n        }\r\n        for(const opt in mountOptions) {\r\n            output[opt] = \"\";\r\n        }\r\n        return output;\r\n    })());\r\n\r\n    const [isValid, setIsValid] = useState((() => {\r\n        const output = {};\r\n        for(const opt in vfsOptions) {\r\n            output[opt] = true;\r\n        }\r\n        for(const opt in mountOptions) {\r\n            output[opt] = true;\r\n        }\r\n        return output;\r\n    })());\r\n\r\n    const [vfsOptionsValues, setVfsOptionsValues] = useState({});\r\n\r\n    const [mountOptionsValues, setMountOptionsValues] = useState({});\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const handleCreateMount = () => {\r\n        if (!okHandle) {\r\n            throw new Error(\"Ok handle is null\");\r\n        }\r\n\r\n        okHandle(mountFs, mountPoint, vfsOptionsValues, mountOptionsValues);\r\n    }\r\n\r\n    const isCreateDisabled = () => {\r\n        return !mountFs || !mountPoint;\r\n    }\r\n\r\n    /**\r\n     * Handle init change and set appropriate errors.\r\n     * @param e\r\n     * @param option\r\n     * @param formValues\r\n     * @param setFormValues\r\n     */\r\n    const handleInputChange = (e, option, formValues, setFormValues) => {\r\n\r\n        let inputName = e.target.name;\r\n        let inputValue = e.target.value;\r\n        const inputType = option.Type;\r\n        if(inputType === \"bool\") {\r\n            inputValue = inputValue === \"true\"\r\n        }else if (inputType === \"int\") {\r\n            inputValue = parseInt(inputValue);\r\n        }\r\n        setFormValues({\r\n            ...formValues,\r\n            [inputName]: inputValue\r\n        });\r\n\r\n        let validateResult = true;\r\n        let error = \"\";\r\n        if (inputType === \"SizeSuffix\") {\r\n            validateResult = validateSizeSuffix(inputValue);\r\n            if (!validateResult) {\r\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\r\n            }\r\n        } else if (inputType === \"Duration\") {\r\n            validateResult = validateDuration(inputValue);\r\n            if (!validateResult) {\r\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\r\n            }\r\n        } else if (inputType === \"int\") {\r\n            validateResult = validateInt(inputValue);\r\n            if (!validateResult) {\r\n                error = \"The valid input is int (100,200,300 etc)\"\r\n            }\r\n        }\r\n\r\n        if (option.Required && (!inputValue || inputValue === \"\")) {\r\n            validateResult = false;\r\n            if (!validateResult) {\r\n                error += \" This field is required\";\r\n            }\r\n        }\r\n        setFormErrors({\r\n            ...formErrors,\r\n            [inputName]: error\r\n        });\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            [inputName]: validateResult\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div data-test=\"newMountModalComponent\">\r\n            <Button color=\"primary\" onClick={toggle}>{buttonLabel}</Button>\r\n            <Modal isOpen={modal} toggle={toggle} className={className}>\r\n                <ModalHeader toggle={toggle}>New Mount</ModalHeader>\r\n                <ModalBody>\r\n                    <FormGroup row>\r\n                        <Label for={\"mountFs\"} sm={5}>Fs</Label>\r\n                        <Col sm={7}>\r\n                            <RemotesList\r\n                                remoteName={mountFs}\r\n                                handleChangeRemoteName={setMountFs}\r\n                            />\r\n                            <FormFeedback/>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    {mountFs && <FormGroup row>\r\n                        <Label for={\"mountPoint\"} sm={5}>Mount Point</Label>\r\n                        <Col sm={7}>\r\n                            <Input type={\"text\"} value={mountPoint}\r\n                                   name={\"mountPoint\"}\r\n                                   id={\"mountPoint\"} onChange={e => setMountPoint(e.target.value)} required={true}>\r\n\r\n                            </Input>\r\n                            <FormFeedback/>\r\n\r\n                        </Col>\r\n                    </FormGroup>}\r\n\r\n                    <Row>\r\n                        <Col lg={6}>\r\n                            <p>Mount Options</p>\r\n                            <MountOptions\r\n                                isValidMap={isValid}\r\n                                errorsMap={formErrors}\r\n                                currentValues={mountOptionsValues}\r\n                                setCurrentValues={setMountOptionsValues}\r\n                                changeHandler={handleInputChange}\r\n                                options={mountOptions}\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col lg={6}>\r\n                            <p>VFS Options</p>\r\n                            <MountOptions\r\n                                isValidMap={isValid}\r\n                                errorsMap={formErrors}\r\n                                currentValues={vfsOptionsValues}\r\n                                setCurrentValues={setVfsOptionsValues}\r\n                                changeHandler={handleInputChange}\r\n                                options={vfsOptions}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button data-test=\"ok-button\" color=\"primary\" onClick={handleCreateMount}\r\n                            disabled={isCreateDisabled()}>Create</Button>{' '}\r\n                    <Button data-test=\"cancel-button\" color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nNewMountModal.propTypes = {\r\n    /**\r\n     * Text for open modal button\r\n     */\r\n    buttonLabel: PropTypes.string,\r\n    /**\r\n     * Class for open modal button\r\n     */\r\n    buttonClass: PropTypes.string,\r\n    /**\r\n     * Function to be called when ok button is clicked.\r\n     */\r\n    okHandle: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default NewMountModal;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Col, Row, Table} from \"reactstrap\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport {addMount, getMountList, unmount, unmountAll} from \"../../actions/mountActions\";\r\nimport NewMountModal from \"./NewMountModal\";\r\n\r\n/**\r\n * MountDashboard is the main page for mounting and unmounting drives.\r\n */\r\nclass MountDashboard extends React.Component {\r\n\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {\r\n\t\t\tshowNewMountCard: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst {getMountList} = this.props;\r\n\t\tgetMountList();\r\n\t}\r\n\r\n\r\n\thandleRemoveMount = (item) => {\r\n\t\tconst {unmount} = this.props;\r\n\t\tunmount(item.MountPoint);\r\n\t}\r\n\r\n\thandleCreateNewMount = (mountFs, mountPoint, vfsOptions, mountOptions) => {\r\n\t\tconst {addMount} = this.props;\r\n\t\taddMount(mountFs, mountPoint, \"\", vfsOptions, mountOptions);\r\n\t}\r\n\r\n\thandleUnmountAll = () => {\r\n\t\tconst {unmountAll} = this.props;\r\n\t\tunmountAll();\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst {currentMounts} = this.props;\r\n\t\treturn (\r\n\t\t\t<div data-test=\"mountDashboardComponent\">\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col lg={12} className=\"mb-4 d-flex justify-content-between\">\r\n\t\t\t\t\t\t<NewMountModal buttonLabel=\"Create new mount\" okHandle={this.handleCreateNewMount}/>\r\n\t\t\t\t\t\t<Button className={\"float-right\"} color=\"danger\" onClick={this.handleUnmountAll}>Unmount\r\n\t\t\t\t\t\t\tall</Button>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Table responsive className=\"table-striped\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>No.</th>\r\n\t\t\t\t\t\t<th>Mount Point</th>\r\n\t\t\t\t\t\t<th>Mounted since</th>\r\n\t\t\t\t\t\t<th>Fs</th>\r\n\t\t\t\t\t\t<th>Actions</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcurrentMounts && currentMounts.map((item, index) => {\r\n\t\t\t\t\t\t\t\treturn (<tr key={item.MountPoint}>\r\n\t\t\t\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{item.MountPoint}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{new Date(item.MountedOn).toLocaleTimeString()}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{item.Fs}</td>\r\n\t\t\t\t\t\t\t\t\t<td><Button color=\"danger\" onClick={() => this.handleRemoveMount(item)}>Unmount</Button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\r\n\t\t\t</div>);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tcurrentMounts: state.mount.currentMounts,\r\n});\r\n\r\nMountDashboard.propTypes = {\r\n\t// currentMounts: PropTypes.object.isRequired,\r\n\tcurrentMounts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\tgetMountList: PropTypes.func.isRequired,\r\n\taddMount: PropTypes.func.isRequired,\r\n\tunmount: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps, {getMountList, addMount, unmount, unmountAll})(MountDashboard);\r\n"],"sourceRoot":""}