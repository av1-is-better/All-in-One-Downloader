{"version":3,"sources":["views/Base/BackendStatusCard/BackendStatusCard.js","actions/statusActions.js","../node_modules/reactstrap/es/Progress.js","views/Base/RunningJobs/RunningJobs.js","../../../js/custom-tooltips.js","../../../js/index.js","../node_modules/reactstrap/es/Collapse.js"],"names":["TaskModal","ReactDOM","createPortal","mode","document","getElementById","MODAL_ROOT_ELEMENT","BackendStatusCard","React","Component","toggleCheckStatus","this","props","checkStatus","enableCheckStatus","console","log","componentDidMount","getStatus","refreshInterval","setInterval","STATUS_REFRESH_TIMEOUT","componentWillUnmount","clearInterval","render","isConnected","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","username","USER_NAME_KEY","className","StatusText","connectivityStatus","userName","Fragment","type","onClick","statusText","defaultProps","connect","state","status","isDisabled","dispatch","getState","a","getStats","then","res","FETCH_STATUS","REQUEST_SUCCESS","payload","error","REQUEST_ERROR","shouldEnable","ENABLE_STATUS_CHECK","getBandwidth","getCurrentBandwidthSetting","GET_BANDWIDTH","setBandwidth","newRate","setCurrentBandwidthSetting","SET_BANDWIDTH","propTypes","children","PropTypes","node","bar","bool","multi","tag","tagPropType","value","oneOfType","string","number","min","max","animated","striped","color","barClassName","cssModule","object","style","barAriaValueText","barAriaLabelledBy","Progress","Tag","attributes","_objectWithoutPropertiesLoose","percent","toNumber","progressClasses","mapToCssModules","classNames","progressBarClasses","ProgressBar","createElement","_objectSpread2","width","role","_extends","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","display","JobCard","job","name","eta","percentage","speed","speedAvg","size","bytes","isNaN","Card","CardHeader","CardBody","formatBytes","secondsToStr","JobCardRow","Row","Col","lg","length","substr","getCroppedName","GlobalStatus","stats","checks","elapsedTime","deletes","errors","transfers","lastError","TransferringJobs","transferring","undefined","map","item","idx","key","TransferringJobsRow","grouped","groupByKey","group","array","forEach","val","keys","push","JobGroup","groupId","useState","showCollapse","setShowCollapse","cancelButtonEnabled","setCancelButtonEnabled","Container","sm","Button","disabled","e","stopPropagation","indexOf","jobid","split","axiosInstance","post","urls","stopJob","_async","toast","info","catch","err","Collapse","isOpen","RunningJobs","constructor","context","super","toggleShowing","setState","prevState","isShowing","jobs","lineChartData","data","overflowY","ownProps","speedData","labels","data1","data2","dataLength","slice","Math","ceil","bytesToKB","toFixed","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","ClassName","Selector","DIV","SPAN","TOOLTIP","_chart","canvas","id","_idMaker","_canvasId","_setCanvasId","tooltip","tooltipModel","titleLines","tooltipHeader","tooltipHeaderTitle","tooltipBody","tooltipBodyItems","tooltipBodyItem","colors","tooltipBodyItemColor","tooltipBodyItemLabel","tooltipBodyItemValue","position","positionY","positionLeft","positionTop","halfWidth","customTooltips","_transitionStatusToCl","Transition","arrayOf","navbar","innerRef","func","appear","enter","exit","timeout","TransitionTimeouts","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","_this","call","height","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","onEntering","isAppearing","onEntered","onExit","onExiting","offsetHeight","onExited","_this2","_this$props","otherProps","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","in","collapseClass","getTransitionClass","classes","ref"],"mappings":"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","file":"static/js/4.21c41da0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport ReactDOM from \"react-dom\";\r\nimport RunningJobs from \"../RunningJobs\";\r\nimport {connect} from \"react-redux\";\r\nimport {enableCheckStatus, getStatus} from \"../../../actions/statusActions\";\r\nimport {IP_ADDRESS_KEY, MODAL_ROOT_ELEMENT, STATUS_REFRESH_TIMEOUT, USER_NAME_KEY} from \"../../../utils/Constants\";\r\n\r\n/**\r\n * Functional component Modal which is placed in the element with id \"modal-root\" in index.html using React.createPortal\r\n * @returns {{children, implementation, containerInfo, $$typeof, key}}\r\n * @constructor\r\n */\r\nfunction TaskModal() {\r\n    return ReactDOM.createPortal((\r\n        <RunningJobs mode={\"modal\"}/>\r\n\r\n    ), document.getElementById(MODAL_ROOT_ELEMENT));\r\n}\r\n\r\n/**\r\n * Component for display and monitoring of backend rclone status. Auto refresh status in redux store every 5 seconds.\r\n */\r\nclass BackendStatusCard extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        // Check if the connection to the backend is active\r\n        this.props.getStatus();\r\n        this.refreshInterval = setInterval(() => this.props.getStatus(), STATUS_REFRESH_TIMEOUT);\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        // Clear the interval before component is unmounted\r\n        clearInterval(this.refreshInterval);\r\n    }\r\n\r\n    /**\r\n     * Enable or disable checking of status request by http request to the backend.\r\n     */\r\n    toggleCheckStatus = () => {\r\n        const {checkStatus, enableCheckStatus} = this.props;\r\n        console.log(checkStatus, enableCheckStatus);\r\n        enableCheckStatus(!checkStatus);\r\n    };\r\n\r\n    /**\r\n     * Renders the component with mode.\r\n     * Card: Enables the card mode.\r\n     * Default: Table mode (Grid)\r\n     * @returns {*}\r\n     */\r\n    render() {\r\n        const {isConnected, mode, checkStatus} = this.props;\r\n\r\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\r\n        const username = localStorage.getItem(USER_NAME_KEY);\r\n\r\n\r\n        if (mode === \"card\")\r\n            return (\r\n\r\n                <Card\r\n                    className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\r\n                    <CardHeader>\r\n                        Overview\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <StatusText checkStatus={checkStatus} connectivityStatus={isConnected} ipAddress={ipAddress}\r\n                                    userName={username}/>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        else /*Default*/\r\n            return (\r\n                <React.Fragment>\r\n                    <Button type=\"primary\" onClick={this.toggleCheckStatus}\r\n                            className={isConnected ? \"bg-info  d-none d-lg-block\" : \"bg-warning d-none d-lg-block\"}> {checkStatus ? isConnected ? \"CONNECTED\" : \"DISCONNECTED\" : \"DISABLED\"}</Button>\r\n                    {/*Show current tasks in the side modal*/}\r\n                    <TaskModal/>\r\n                </React.Fragment>\r\n            );\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param connectivityStatus    {boolean}   Current connectivity status to the backend.\r\n * @param checkStatus           {boolean}   Specify whether to check the status or skip.\r\n * @param ipAddress             {string}    IP Address of the backend\r\n * @param userName              {string}    User name of the currently logged in user.\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction StatusText({connectivityStatus, checkStatus, ipAddress, userName}) {\r\n\r\n    let statusText = \"\";\r\n    if(!checkStatus){\r\n        statusText = \"Not monitoring connectivity status. Tap the icon in navbar to start.\";\r\n    }else if(connectivityStatus){\r\n        // Connected to backend\r\n        statusText = \"rClone Backend is connected and working as expected\";\r\n    }else{\r\n        statusText = \"Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                <span className={\"card-subtitle\"}>Status: {\" \"}</span>\r\n                <span className=\"card-text\">{statusText}</span>\r\n            </p>\r\n            <p>\r\n                <span className={\"card-subtitle\"}>Current IP Address: {\" \"}</span>\r\n                <span className=\"card-text\">{ipAddress}</span>\r\n            </p>\r\n            <p>\r\n                <span className={\"card-subtitle\"}>Username: {\" \"}</span>\r\n                <span className=\"card-text\">{userName}</span>\r\n            </p>\r\n        </>\r\n    )\r\n}\r\n\r\nconst propTypes = {\r\n    /**\r\n     * Used to specify mode of render : card/ grid.\r\n     */\r\n    mode: PropTypes.string.isRequired,\r\n    /**\r\n     * Boolean to represent internet connectivity\r\n     */\r\n    isConnected: PropTypes.bool.isRequired,\r\n    /**\r\n     * Boolean to represent whether checking for status at interval is allowed\r\n     */\r\n    checkStatus: PropTypes.bool.isRequired,\r\n\r\n    /**\r\n     * Function to enable or disable status check\r\n     */\r\n    enableCheckStatus: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * Get the current status\r\n     */\r\n    getStatus: PropTypes.func.isRequired\r\n};\r\n\r\nconst defaultProps = {\r\n    mode: \"card\",\r\n};\r\n\r\n\r\nBackendStatusCard.propTypes = propTypes;\r\nBackendStatusCard.defaultProps = defaultProps;\r\n\r\nconst mapStateToProps = state => ({\r\n    isConnected: state.status.isConnected,\r\n    isDisabled: state.status.isDisabled,\r\n    checkStatus: state.status.checkStatus\r\n});\r\n\r\nexport default connect(mapStateToProps, {getStatus, enableCheckStatus})(BackendStatusCard);\r\n","import {ENABLE_STATUS_CHECK, FETCH_STATUS, GET_BANDWIDTH, REQUEST_ERROR, REQUEST_SUCCESS, SET_BANDWIDTH} from \"./types\";\r\nimport {getCurrentBandwidthSetting, getStats, setCurrentBandwidthSetting} from \"rclone-api\";\r\n\r\n/**\r\n * Gets the current status of the rclone backend.\r\n * Depends upon state.status.checkStatus to execute the http request, if set to false, does not send any http request\r\n * @returns {Function}\r\n */\r\nexport const getStatus = () => async (dispatch, getState) => {\r\n    // console.log(\"get Status\");\r\n    const {status} = getState();\r\n    if (status.checkStatus) {\r\n        getStats().then(res => dispatch({\r\n            type: FETCH_STATUS,\r\n            status: REQUEST_SUCCESS,\r\n            payload: res\r\n        }), error => dispatch({\r\n            type: FETCH_STATUS,\r\n            status: REQUEST_ERROR,\r\n            payload: error\r\n        }))\r\n    }\r\n};\r\n\r\n/**\r\n * Enables or disables the check status functionality to improve network performance.\r\n * Modifies state.status.checkStatus according to the passed value.\r\n * @param shouldEnable {boolean} It specifies whether to check for status updates from the backend or skip checking it\r\n * @returns {Function}\r\n */\r\nexport const enableCheckStatus = (shouldEnable) => async dispatch => {\r\n    dispatch({\r\n        type: ENABLE_STATUS_CHECK,\r\n        payload: shouldEnable\r\n    })\r\n};\r\n\r\n\r\n/**\r\n * Gets the current bandwidth set in the rclone backend.\r\n * @returns {Function}\r\n */\r\nexport const getBandwidth = () => async dispatch => {\r\n    // console.log(\"get Status\");\r\n    getCurrentBandwidthSetting().then(res => dispatch({\r\n        type: GET_BANDWIDTH,\r\n        status: REQUEST_SUCCESS,\r\n        payload: res\r\n    }), error => dispatch({\r\n        type: GET_BANDWIDTH,\r\n        status: REQUEST_ERROR,\r\n        payload: error\r\n    }))\r\n};\r\n\r\n/**\r\n * Changes the current bandwidth limit of the rclone backend.\r\n * @param newRate {string} Human readable format of size eg: 1M|2M|1.2G specifying 1MB, 2MB, 1.2GB respectively.\r\n * @returns {Function}\r\n */\r\nexport const setBandwidth = (newRate) => async dispatch => {\r\n    // console.log(\"get Status\");\r\n    setCurrentBandwidthSetting(newRate).then(res => dispatch({\r\n        type: SET_BANDWIDTH,\r\n        status: REQUEST_SUCCESS,\r\n        payload: res\r\n    }), error => dispatch({\r\n        type: SET_BANDWIDTH,\r\n        status: REQUEST_ERROR,\r\n        payload: error\r\n    }))\r\n};\r\n\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, toNumber } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  bar: PropTypes.bool,\n  multi: PropTypes.bool,\n  tag: tagPropType,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  animated: PropTypes.bool,\n  striped: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  barClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  style: PropTypes.object,\n  barAriaValueText: PropTypes.string,\n  barAriaLabelledBy: PropTypes.string\n};\nvar defaultProps = {\n  tag: 'div',\n  value: 0,\n  min: 0,\n  max: 100,\n  style: {}\n};\n\nvar Progress = function Progress(props) {\n  var children = props.children,\n      className = props.className,\n      barClassName = props.barClassName,\n      cssModule = props.cssModule,\n      value = props.value,\n      min = props.min,\n      max = props.max,\n      animated = props.animated,\n      striped = props.striped,\n      color = props.color,\n      bar = props.bar,\n      multi = props.multi,\n      Tag = props.tag,\n      style = props.style,\n      barAriaValueText = props.barAriaValueText,\n      barAriaLabelledBy = props.barAriaLabelledBy,\n      attributes = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"barClassName\", \"cssModule\", \"value\", \"min\", \"max\", \"animated\", \"striped\", \"color\", \"bar\", \"multi\", \"tag\", \"style\", \"barAriaValueText\", \"barAriaLabelledBy\"]);\n\n  var percent = toNumber(value) / toNumber(max) * 100;\n  var progressClasses = mapToCssModules(classNames(className, 'progress'), cssModule);\n  var progressBarClasses = mapToCssModules(classNames('progress-bar', bar ? className || barClassName : barClassName, animated ? 'progress-bar-animated' : null, color ? \"bg-\" + color : null, striped || animated ? 'progress-bar-striped' : null), cssModule);\n  var ProgressBar = multi ? children : React.createElement(\"div\", {\n    className: progressBarClasses,\n    style: _objectSpread2({}, style, {\n      width: percent + \"%\"\n    }),\n    role: \"progressbar\",\n    \"aria-valuenow\": value,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuetext\": barAriaValueText,\n    \"aria-labelledby\": barAriaLabelledBy,\n    children: children\n  });\n\n  if (bar) {\n    return ProgressBar;\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: progressClasses,\n    children: ProgressBar\n  }));\n};\n\nProgress.propTypes = propTypes;\nProgress.defaultProps = defaultProps;\nexport default Progress;","import React, {useState} from 'react';\r\nimport {Button, Card, CardBody, CardHeader, Col, Collapse, Container, Progress, Row} from \"reactstrap\";\r\nimport {bytesToKB, formatBytes, groupByKey, secondsToStr} from \"../../../utils/Tools\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\r\nimport axiosInstance from \"../../../utils/API/API\";\r\nimport urls from \"../../../utils/API/endpoint\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst options = {\r\n    tooltips: {\r\n        enabled: false,\r\n        custom: CustomTooltips\r\n    },\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n        yAxes: [{\r\n            ticks: {\r\n                beginAtZero: true\r\n            }\r\n        }],\r\n        xAxes: [{\r\n            ticks: {\r\n                display: false\r\n            }\r\n        }]\r\n    }\r\n};\r\nfunction JobCard({job}) {\r\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\r\n    if (name && !isNaN(speed)) {\r\n\r\n        return (<Card>\r\n            <CardHeader>Running Jobs</CardHeader>\r\n            <CardBody>\r\n                <p>{name}</p> {/*Name of the file*/}\r\n                <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\r\n                <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\r\n                <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\r\n                <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\r\n                <p><strong>Size: </strong>{formatBytes(size)}</p>\r\n                <p><strong>ETA: </strong>{secondsToStr(eta)}</p>\r\n            </CardBody>\r\n\r\n        </Card>);\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction getCroppedName(name) {\r\n    const leftChars = 30;\r\n    const rightChars = 5;\r\n\r\n    if (name.length > leftChars) {\r\n        const croppedName = name.substr(0, leftChars) + \" ... \" + name.substr(-rightChars);\r\n        return croppedName;\r\n    }\r\n    return name;\r\n\r\n}\r\n\r\nfunction JobCardRow({job}) {\r\n    // https://github.com/rclone/rclone-webui-react/issues/99:\r\n    // Speed and AvgSpeed seem to be swapped in Running Jobs Card #99\r\n    const {name, percentage, speedAvg, size} = job;\r\n    console.log(\"Job:\" + job);\r\n    return (\r\n        <React.Fragment>\r\n            <Row className=\"runningJobs\">\r\n                {(size && speedAvg) ? (\r\n\r\n                    <Col lg={12} className=\"itemName\"> {getCroppedName(name)} {\" \"}\r\n                        ({formatBytes(size)}) - {formatBytes(speedAvg)}PS </Col>\r\n                ) : (\r\n                    <Col lg={12}>Calculating</Col>)}\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\r\n            </Row>\r\n\r\n        </React.Fragment>\r\n    );\r\n\r\n\r\n}\r\n\r\nfunction GlobalStatus({stats}) {\r\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers, lastError} = stats;\r\n    return (\r\n        <Card>\r\n            <CardHeader><strong>Global Stats</strong></CardHeader>\r\n            <CardBody>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Bytes Transferred:</td>\r\n                        <td className=\"card-text\">{formatBytes(bytes)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Average Speed:</td>\r\n                        <td className=\"card-text\">{formatBytes(speed)}PS</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Checks:</td>\r\n                        <td className=\"card-text\">{checks}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Deletes:</td>\r\n                        <td className=\"card-text\">{deletes}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Running since:</td>\r\n                        <td className=\"card-text\">{secondsToStr(elapsedTime)}</td>\r\n                    </tr>\r\n                    <tr className={errors > 0 ? \"table-danger\" : \"\"}>\r\n                        <td className=\"card-subtitle\">Errors:</td>\r\n                        <td className=\"card-text\">{errors}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Transfers:</td>\r\n                        <td className=\"card-text\">{transfers}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"card-subtitle\">Last Error:</td>\r\n                        <td className=\"card-text\">{lastError}</td>\r\n                    </tr>\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n            </CardBody>\r\n            {/*<CardFooter></CardFooter>*/}\r\n\r\n        </Card>);\r\n}\r\n\r\nfunction TransferringJobs({transferring}) {\r\n    if (transferring !== undefined) {\r\n        return transferring.map((item, idx) => {\r\n            return (<JobCard key={item.name} job={item}/>);\r\n        });\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction TransferringJobsRow({transferring}) {\r\n    if (transferring !== undefined) {\r\n        const grouped = groupByKey(transferring, job => job.group);\r\n\r\n        const array = [];\r\n\r\n        grouped.forEach((val, keys) => {\r\n            array.push (<JobGroup job={val} groupId={keys} key={keys}/>);\r\n        });\r\n        return array;\r\n\r\n        // return grouped.values().map((item, idx) => {\r\n        // \treturn (<JobCardRow key={item.name} job={item}/>);\r\n        // });\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction JobGroup({job, groupId}) {\r\n    const [showCollapse, setShowCollapse] = useState(false);\r\n    const [cancelButtonEnabled, setCancelButtonEnabled] = useState(true);\r\n\r\n    const stopJob = (e, groupId) => {\r\n        e.stopPropagation();\r\n        if(groupId && groupId.indexOf('/') !== -1) {\r\n            setCancelButtonEnabled(false);\r\n            const jobid = groupId.split('/')[1];\r\n            axiosInstance.post(urls.stopJob, {jobid, _async:true}).then(function (res) {\r\n                toast.info(`Job ${jobid} stopped`);\r\n            }).catch(err => {\r\n                toast.error(`Job ${jobid} couldn't be stopped`)\r\n            })\r\n        }\r\n    };\r\n    // setCancelButtonEnabled((groupId && groupId !== \"undefined\"));\r\n    if(job) {\r\n        return (\r\n            <>\r\n                {groupId &&\r\n                <Card>\r\n\r\n                    <CardHeader onClick={() => setShowCollapse(!showCollapse)}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col sm={10}>\r\n                                    Transferring {job.length} file(s)\r\n                                </Col>\r\n                                <Col sm={2}>\r\n                                    <Button color={\"light\"} disabled={!cancelButtonEnabled}\r\n                                            onClick={(e) => stopJob(e, groupId)}\r\n                                            className={\"btn-outline-danger btn-pill\"}><i\r\n                                        className=\"fa fa-close fa-sm\"/></Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </CardHeader>\r\n                    <Collapse isOpen={showCollapse}>\r\n                        <CardBody>\r\n                            {\r\n                                job.map((item, idx) => {\r\n                                    return (<JobCardRow key={item.name} job={item}/>);\r\n                                })\r\n                            }\r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nclass RunningJobs extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            isShowing: true\r\n        }\r\n    }\r\n\r\n    toggleShowing = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                isShowing: !prevState.isShowing\r\n            }\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {jobs, isConnected, lineChartData} = this.props;\r\n        const {transferring} = jobs;\r\n        const {mode} = this.props;\r\n        if (mode === \"full-status\") {\r\n            if (isConnected) {\r\n                return (\r\n                    <Row>\r\n                        <Col sm={12} lg={6}>\r\n                            <GlobalStatus stats={jobs}/>\r\n                        </Col>\r\n\r\n                        <Col sm={12} lg={6}>\r\n                            <Card>\r\n                                <CardHeader>\r\n                                    Speed\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <div className=\"chart-wrapper\">\r\n                                        <Line data={lineChartData} options={options}/>\r\n                                    </div>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col sm={12} lg={4}>\r\n                            <TransferringJobs transferring={transferring}/>\r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            } else {\r\n                return (<div>Not connected to rclone.</div>)\r\n            }\r\n\r\n        } else if (mode === \"card\") {\r\n            if (isConnected) {\r\n                return (\r\n                    <TransferringJobsRow transferring={transferring}/>\r\n                );\r\n            } else {\r\n                return (<div>Not connected to rclone.</div>);\r\n            }\r\n\r\n        } else if (mode === \"modal\") {\r\n            if (transferring && transferring.length > 0)\r\n                return (\r\n                    <Card className=\"progress-modal d-none d-sm-block\">\r\n                        <CardHeader onClick={() => this.toggleShowing()}>Progress\r\n                            <div className=\"card-header-actions\">\r\n                                <Button color=\"link\">\r\n                                    <i className=\"fa fa-close fa-lg\"/>\r\n                                </Button>\r\n                            </div>\r\n                        </CardHeader>\r\n                        <CardBody className={!this.state.isShowing ? \"d-none\" : \"progress-modal-body\"}  style={{overflowY: 'scroll'}}>\r\n                            <TransferringJobsRow transferring={transferring}/>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                );\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nRunningJobs.propTypes = {\r\n    mode: PropTypes.string.isRequired,\r\n    isConnected: PropTypes.bool.isRequired,\r\n    jobs: PropTypes.object.isRequired,\r\n    error: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n    const speedData = state.status.speed;\r\n    let lineChartData = {};\r\n    if (speedData) {\r\n        let labels = [];\r\n        let data1 = [];\r\n        let data2 = [];\r\n\r\n        const dataLength = speedData.length;\r\n        //\r\n        const limitedData = speedData.slice(dataLength - 50, dataLength - 1);\r\n        limitedData.forEach((item, idx) => {\r\n            labels.push(Math.ceil(item.elapsedTime));\r\n            data1.push(bytesToKB(item.speed).toFixed(2));\r\n            data2.push(bytesToKB(item.speedAvg).toFixed(2));\r\n        });\r\n\r\n        lineChartData = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: 'Speed (kbps)',\r\n                    fill: false,\r\n                    lineTension: 0.1,\r\n                    backgroundColor: 'rgba(75,192,192,0.4)',\r\n                    borderColor: 'rgba(75,192,192,1)',\r\n                    borderCapStyle: 'butt',\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    borderJoinStyle: 'miter',\r\n                    pointBorderColor: 'rgba(75,192,192,1)',\r\n                    pointBackgroundColor: '#fff',\r\n                    pointBorderWidth: 1,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: data1,\r\n                },\r\n                {\r\n                    label: 'Average Speed (kbps)',\r\n                    fill: true,\r\n                    lineTension: 0.1,\r\n                    backgroundColor: 'rgba(187,69,14,0.4)',\r\n                    borderColor: 'rgb(192,76,58)',\r\n                    borderCapStyle: 'butt',\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    borderJoinStyle: 'miter',\r\n                    pointBorderColor: 'rgb(187,69,14)',\r\n                    pointBackgroundColor: '#ff7459',\r\n                    pointBorderWidth: 1,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: data2,\r\n                }\r\n            ],\r\n        };\r\n    }\r\n\r\n\r\n    return {\r\n        jobs: state.status.jobs,\r\n        isConnected: state.status.isConnected,\r\n        error: state.status.error,\r\n        lineChartData\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(RunningJobs);\r\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Plugins - Custom Tooltips for Chart.js (v1.3.1): custom-tooltips.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\nfunction CustomTooltips(tooltipModel) {\n  // Add unique id if not exist\n  const _setCanvasId = () => {\n    const _idMaker = () => {\n      const _hex = 16\n      const _multiplier = 0x10000\n      return ((1 + Math.random()) * _multiplier | 0).toString(_hex)\n    }\n    const _canvasId = `_canvas-${_idMaker() + _idMaker()}`\n    this._chart.canvas.id = _canvasId\n    return _canvasId\n  }\n\n  const ClassName = {\n    ABOVE                   : 'above',\n    BELOW                   : 'below',\n    CHARTJS_TOOLTIP         : 'chartjs-tooltip',\n    NO_TRANSFORM            : 'no-transform',\n    TOOLTIP_BODY            : 'tooltip-body',\n    TOOLTIP_BODY_ITEM       : 'tooltip-body-item',\n    TOOLTIP_BODY_ITEM_COLOR : 'tooltip-body-item-color',\n    TOOLTIP_BODY_ITEM_LABEL : 'tooltip-body-item-label',\n    TOOLTIP_BODY_ITEM_VALUE : 'tooltip-body-item-value',\n    TOOLTIP_HEADER          : 'tooltip-header',\n    TOOLTIP_HEADER_ITEM     : 'tooltip-header-item'\n  }\n\n  const Selector = {\n    DIV     : 'div',\n    SPAN    : 'span',\n    TOOLTIP : `${this._chart.canvas.id || _setCanvasId()}-tooltip`\n  }\n\n  let tooltip = document.getElementById(Selector.TOOLTIP)\n\n  if (!tooltip) {\n    tooltip = document.createElement('div')\n    tooltip.id = Selector.TOOLTIP\n    tooltip.className = ClassName.CHARTJS_TOOLTIP\n    this._chart.canvas.parentNode.appendChild(tooltip)\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltip.style.opacity = 0\n    return\n  }\n\n  // Set caret Position\n  tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM)\n  if (tooltipModel.yAlign) {\n    tooltip.classList.add(tooltipModel.yAlign)\n  } else {\n    tooltip.classList.add(ClassName.NO_TRANSFORM)\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const titleLines = tooltipModel.title || []\n\n    const tooltipHeader = document.createElement(Selector.DIV)\n    tooltipHeader.className = ClassName.TOOLTIP_HEADER\n\n    titleLines.forEach((title) => {\n      const tooltipHeaderTitle = document.createElement(Selector.DIV)\n      tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM\n      tooltipHeaderTitle.innerHTML = title\n      tooltipHeader.appendChild(tooltipHeaderTitle)\n    })\n\n    const tooltipBody = document.createElement(Selector.DIV)\n    tooltipBody.className = ClassName.TOOLTIP_BODY\n\n    const tooltipBodyItems = tooltipModel.body.map((item) => item.lines)\n    tooltipBodyItems.forEach((item, i) => {\n      const tooltipBodyItem = document.createElement(Selector.DIV)\n      tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM\n\n      const colors = tooltipModel.labelColors[i]\n\n      const tooltipBodyItemColor = document.createElement(Selector.SPAN)\n      tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR\n      tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor\n\n      tooltipBodyItem.appendChild(tooltipBodyItemColor)\n\n      if (item[0].split(':').length > 1) {\n        const tooltipBodyItemLabel = document.createElement(Selector.SPAN)\n        tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL\n        tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemLabel)\n\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0].split(': ').pop()\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      } else {\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      }\n\n      tooltipBody.appendChild(tooltipBodyItem)\n    })\n\n    tooltip.innerHTML = ''\n\n    tooltip.appendChild(tooltipHeader)\n    tooltip.appendChild(tooltipBody)\n  }\n\n  const position = this._chart.canvas.getBoundingClientRect()\n\n  const positionY = this._chart.canvas.offsetTop\n  const positionX = this._chart.canvas.offsetLeft\n\n  let positionLeft = positionX + tooltipModel.caretX\n  const positionTop = positionY + tooltipModel.caretY\n  // eslint-disable-next-line\n  const halfWidth = tooltipModel.width / 2\n\n  if (positionLeft + halfWidth > position.width) {\n    positionLeft -= halfWidth\n  } else if (positionLeft < halfWidth) {\n    positionLeft += halfWidth\n  }\n\n  // Display, position, and set styles for font\n  tooltip.style.opacity = 1\n  tooltip.style.left = `${positionLeft}px`\n  tooltip.style.top = `${positionTop}px`\n}\n\nexport default CustomTooltips\n","import CustomTooltips from './custom-tooltips'\nconst customTooltips = CustomTooltips\n// TODO: camel-case\nexport {\n  CustomTooltips,\n  customTooltips\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread2({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread2({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread2({}, childProps.style, {}, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;"],"sourceRoot":""}